import random
import logging
import os
import psycopg2
import requests
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters
)
from apscheduler.schedulers.background import BackgroundScheduler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
DATABASE_URL = os.getenv("DATABASE_URL")
TELEGRAM_TOKEN = os.getenv("7596167926:AAGCtIVtPJ4EPfxFLu1pqwdYR2O2_G1mkjQ")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
def init_db():
    conn = psycopg2.connect(DATABASE_URL, sslmode='require')
    c = conn.cursor()
    c.execute("""CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        name TEXT,
        points INTEGER DEFAULT 0,
        wins INTEGER DEFAULT 0,
        losses INTEGER DEFAULT 0,
        tasks TEXT DEFAULT '',
        daily_task TEXT DEFAULT '',
        daily_task_completed BOOLEAN DEFAULT FALSE,
        last_daily_check DATE DEFAULT CURRENT_DATE
    )""")
    conn.commit()
    conn.close()

def get_user(user_id):
    conn = psycopg2.connect(DATABASE_URL, sslmode='require')
    c = conn.cursor()
    c.execute("SELECT * FROM users WHERE user_id=%s", (user_id,))
    row = c.fetchone()
    conn.close()
    return row

def update_user(user_id, **kwargs):
    conn = psycopg2.connect(DATABASE_URL, sslmode='require')
    c = conn.cursor()
    fields = ", ".join([f"{k} = %s" for k in kwargs])
    values = list(kwargs.values()) + [user_id]
    c.execute(f"UPDATE users SET {fields} WHERE user_id=%s", values)
    conn.commit()
    conn.close()

def add_user(user_id, name):
    conn = psycopg2.connect(DATABASE_URL, sslmode='require')
    c = conn.cursor()
    c.execute("INSERT INTO users (user_id, name) VALUES (%s, %s)", (user_id, name))
    conn.commit()
    conn.close()

# –£—Ä–æ–≤–Ω–∏ –∏ –Ω–∞–≥—Ä–∞–¥—ã
def calculate_level(points):
    return points // 10

def get_level_title(level):
    if level < 5: return "üå± –ù–æ–≤–∏—á–æ–∫"
    elif level < 10: return "‚ú® –°—Ç–∞–∂—ë—Ä"
    elif level < 20: return "‚ö°Ô∏è –≠–∫—Å–ø–µ—Ä—Ç"
    else: return "üèÜ –ú–∞—Å—Ç–µ—Ä"

# –ì–∏—Ñ–∫–∏ –∏ API
DAD_JOKE_API = "https://icanhazdadjoke.com/ "
gif_facts = [
    "https://media.giphy.com/media/ABC123/fact1.gif ",
    "https://media.giphy.com/media/DEF456/fact2.gif "
]

# –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
daily_tasks = [
    "–í—ã–ø–µ–π 2 –ª–∏—Ç—Ä–∞ –≤–æ–¥—ã", "–°–¥–µ–ª–∞–π 10 –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π", "–ó–∞–ø–∏—à–∏ 3 —Ü–µ–ª–∏ –Ω–∞ –¥–µ–Ω—å",
    "–ü—Ä–æ–≥—É–ª—è–π—Å—è 20 –º–∏–Ω—É—Ç", "–ü–æ—Å–ª—É—à–∞–π –º—É–∑—ã–∫—É –±–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
]

# –ö–Ω–æ–ø–∫–∏
def get_main_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚òï –§–∞–∫—Ç", callback_data="fact")],
        [InlineKeyboardButton("üòÇ –®—É—Ç–∫–∞ API", callback_data="api_joke")],
        [InlineKeyboardButton("üìù –ó–∞–¥–∞—á–∏", callback_data="tasks")],
        [InlineKeyboardButton("üéÆ –ö–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞", callback_data="game")],
        [InlineKeyboardButton("üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥", callback_data="leaderboard")],
    ])

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
user_points = {}
user_games = {}
user_tasks = {}

async def load_data(context: ContextTypes.DEFAULT_TYPE):
    conn = psycopg2.connect(DATABASE_URL, sslmode='require')
    c = conn.cursor()
    c.execute("SELECT * FROM users")
    rows = c.fetchall()
    for row in rows:
        user_id, name, points, wins, losses, tasks, daily_task, d_task_comp, last_check = row
        user_points[user_id] = points
        user_games[user_id] = {"wins": wins, "losses": losses}
        user_tasks[user_id] = tasks.split(",") if tasks else []
        context.user_data[user_id] = {
            "daily_task": daily_task,
            "daily_task_completed": d_task_comp,
            "last_daily_check": last_check
        }
    conn.close()

async def save_data(context: ContextTypes.DEFAULT_TYPE):
    for user_id in user_points:
        update_user(
            user_id,
            points=user_points[user_id],
            wins=user_games[user_id]["wins"],
            losses=user_games[user_id]["losses"],
            tasks=",".join(user_tasks.get(user_id, [])),
            daily_task=context.user_data[user_id]["daily_task"],
            daily_task_completed=context.user_data[user_id]["daily_task_completed"],
            last_daily_check=context.user_data[user_id]["last_daily_check"]
        )
    logging.info("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î")

async def reset_daily_tasks(context: ContextTypes.DEFAULT_TYPE):
    today = datetime.now().date()
    conn = psycopg2.connect(DATABASE_URL, sslmode='require')
    c = conn.cursor()
    c.execute("UPDATE users SET daily_task='', daily_task_completed=FALSE WHERE last_daily_check < %s", (today,))
    c.execute("UPDATE users SET last_daily_check=%s", (today,))
    conn.commit()
    conn.close()
    logging.info("–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã")

# –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not get_user(user.id): add_user(user.id, user.first_name)
    today = datetime.now().date()
    data = context.user_data.get(user.id, {})
    if data.get("last_daily_check", "2000-01-01") < str(today):
        await reset_daily_tasks(context)
    level = calculate_level(user_points.get(user.id, 0))
    title = get_level_title(level)
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üß† –£—Ä–æ–≤–µ–Ω—å: {level} ‚Äî {title}\n\n–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å:",
        reply_markup=get_main_keyboard()
    )

async def myinfo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    data = context.user_data.get(user.id, {})
    level = calculate_level(user_points.get(user.id, 0))
    title = get_level_title(level)
    stats = f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {user.first_name}:
üß¨ –£—Ä–æ–≤–µ–Ω—å: {level} ‚Äî {title}
üíØ –ë–∞–ª–ª–æ–≤: {user_points.get(user.id, 0)}
üéÆ –ü–æ–±–µ–¥—ã: {user_games[user.id]['wins']} | –ü–æ—Ä–∞–∂–µ–Ω–∏—è: {user_games[user.id]['losses']}
üìå –ó–∞–¥–∞—á–∏: {len(user_tasks.get(user.id, []))}
üéØ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ: {data.get("daily_task", "–ù–µ—Ç") if not data.get("daily_task_completed", False) else "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ!"}
"""
    await update.message.reply_text(stats, reply_markup=get_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user = query.from_user
    await query.answer()

    if query.data == "fact":
        user_points[user.id] += 1
        gif = random.choice(gif_facts)
        await query.edit_message_text("–õ–æ–≤–∏ —Ñ–∞–∫—Ç!")
        await context.bot.send_animation(chat_id=query.message.chat_id, animation=gif)
        await context.bot.send_message(query.message.chat_id, "–•–æ—á–µ—à—å –µ—â—ë?", reply_markup=get_main_keyboard())

    elif query.data == "api_joke":
        user_points[user.id] += 1
        try:
            response = requests.get(DAD_JOKE_API, headers={"Accept": "application/json"})
            joke = response.json()["joke"] if response.status_code == 200 else "–û—à–∏–±–∫–∞."
        except:
            joke = "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à—É—Ç–∫–∏."
        await query.edit_message_text(f"üòÇ –í–æ—Ç —Ç–µ–±–µ —à—É—Ç–∫–∞:\n\n{joke}")
        await context.bot.send_message(query.message.chat_id, "–•–æ—á–µ—à—å –µ—â—ë?", reply_markup=get_main_keyboard())

    elif query.data == "tasks":
        tasks = user_tasks.get(user.id, [])
        text = "üìù –¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:\n" + ("\n".join(tasks) if tasks else "–ù–µ—Ç –∑–∞–¥–∞—á.")
        await query.edit_message_text(text)
        await context.bot.send_message(query.message.chat_id, "–ù–∞–ø–∏—à–∏ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –∏–ª–∏ '—É–¥–∞–ª–∏—Ç—å N', —á—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å.", reply_markup=get_main_keyboard())

    elif query.data == "game":
        user_games[user.id] = user_games.get(user.id, {"wins": 0, "losses": 0})
        keyboard = [[InlineKeyboardButton(t, callback_data=t.lower()) for t in ["ü™® –ö–∞–º–µ–Ω—å", "‚úÇÔ∏è –ù–æ–∂–Ω–∏—Ü—ã", "üìÑ –ë—É–º–∞–≥–∞"]]]
        await query.edit_message_text("üéÆ –í—ã–±–µ—Ä–∏: –∫–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã –∏–ª–∏ –±—É–º–∞–≥–∞?", reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data in ["–∫–∞–º–µ–Ω—å", "–Ω–æ–∂–Ω–∏—Ü—ã", "–±—É–º–∞–≥–∞"]:
        bot_choice = random.choice(["–∫–∞–º–µ–Ω—å", "–Ω–æ–∂–Ω–∏—Ü—ã", "–±—É–º–∞–≥–∞"])
        result = ""
        if query.data == bot_choice:
            result = "–ù–∏—á—å—è!"
        elif (query.data == "–∫–∞–º–µ–Ω—å" and bot_choice == "–Ω–æ–∂–Ω–∏—Ü—ã") or \
             (query.data == "–Ω–æ–∂–Ω–∏—Ü—ã" and bot_choice == "–±—É–º–∞–≥–∞") or \
             (query.data == "–±—É–º–∞–≥–∞" and bot_choice == "–∫–∞–º–µ–Ω—å"):
            result = "–¢—ã –≤—ã–∏–≥—Ä–∞–ª! üéâ"
            user_games[user.id]["wins"] += 1
            user_points[user.id] += 3
        else:
            result = "–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª üò¢"
            user_games[user.id]["losses"] += 1
            user_points[user.id] += 1
        await query.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {query.data.capitalize()}\n–ë–æ—Ç –≤—ã–±—Ä–∞–ª: {bot_choice.capitalize()}\n\n{result}")
        await context.bot.send_message(query.message.chat_id, "–•–æ—á–µ—à—å –µ—â—ë —Ä–∞–∑?", reply_markup=get_main_keyboard())

    elif query.data == "leaderboard":
        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
        c = conn.cursor()
        c.execute("SELECT user_id, points FROM users ORDER BY points DESC LIMIT 10")
        rows = c.fetchall()
        text = "üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥:\n"
        for idx, (uid, points) in enumerate(rows, 1):
            level = calculate_level(points)
            title = get_level_title(level)
            try:
                name = (await context.bot.get_chat(uid)).first_name
            except:
                name = "–ê–Ω–æ–Ω–∏–º"
            text += f"{idx}. {name} ‚Äî {title} | üíØ {points} –±–∞–ª–ª–æ–≤\n"
        await query.edit_message_text(text, reply_markup=get_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = update.message.text.lower().strip()
    if text.startswith("—É–¥–∞–ª–∏—Ç—å"):
        try:
            idx = int(text.split()[1]) - 1
            tasks = user_tasks.get(user.id, [])
            if 0 <= idx < len(tasks):
                tasks.pop(idx)
                user_tasks[user.id] = tasks
                await update.message.reply_text("üóë –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞.")
        except:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: —É–¥–∞–ª–∏—Ç—å N")
    else:
        tasks = user_tasks.get(user.id, [])
        tasks.append(text)
        user_tasks[user.id] = tasks
        await update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞: {text}")

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
async def main():
    if not DATABASE_URL or not TELEGRAM_TOKEN:
        raise ValueError("DATABASE_URL –∏–ª–∏ TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω—ã")
    init_db()
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    await load_data(app)
    scheduler = BackgroundScheduler()
    scheduler.add_job(save_data, 'interval', minutes=10, args=[app])
    scheduler.add_job(reset_daily_tasks, 'cron', hour=0, minute=0, args=[app])
    scheduler.start()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("myinfo", myinfo))
    app.add_handler(CallbackQueryHandler(handle_button))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await app.run_polling()

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())
